/**
 * 
 * Thoughtfully generated by synapticloop gradle-project-init with the templar
 * templating language.
 */

buildscript {
	repositories {
		mavenLocal()
		maven {
			url "https://plugins.gradle.org/"
		}
	}

	dependencies {
		classpath 'synapticloop:documentr:2.1.1'
	}
}

// list all of the plugins for this project
plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.9.3'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.6'
	id 'synapticloop.copyrightr' version '1.0.1'
}

apply plugin: 'synapticloop.documentr'

// textual information for this project
group = 'synapticloop'
archivesBaseName = 'documentr'
description = """documentation (README) generator for projects in both markdown and asciidoc - this utilises the templar templating language"""

version = '2.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7


// all of the repositories that this project will use
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}
configurations {
	minimal
}

// now for all of the dependencies
dependencies {
	runtime 'synapticloop:simpleusage:1.1.2'
	runtime 'synapticloop:simplelogger:1.1.0'
	runtime 'synapticloop:templar:1.2.1'
	runtime 'commons-io:commons-io:2.4'
	runtime 'org.json:json:20160212'
	runtime 'commons-cli:commons-cli:1.3.1'
	runtime 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.0'

	compile gradleApi()
	compile 'synapticloop:simpleusage:1.1.2'
	compile 'synapticloop:simplelogger:1.1.0'
	compile 'synapticloop:templar:1.2.1'
	compile 'commons-io:commons-io:2.4'
	compile 'org.json:json:20160212'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'nl.jworks.markdown_to_asciidoc:markdown_to_asciidoc:1.0'
}

// we always want to fail on version conflict
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

copyrightr {
	dryRun = false

	copyrightHolder = "Synapticloop"

	includes = [ 
		"src/main/**/*.java",
		"LICENSE.txt"
	]

	onlyReplaceFirst = true

	yearSeparator = " - "
}

documentr {
	directory = '.'
	verbose = 'true'
	extension = 'md' // this is the default
//	documentrFile = 'documentr-test.json'
}

def locateJar(lib) {
	configurations.runtime.findAll {it.getName().contains(lib)}.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar) {
	classifier = 'all'

	manifest {
		attributes("Main-Class": "synapticloop.documentr.Main")
	}

	from { locateJar('simpleusage') } { include "**" }
	from { locateJar('simplelogger') } { include "**" }
	from { locateJar('commons-io') } { include "**" }
	from { locateJar('commons-cli') } { include "**" }
	from { locateJar('json') } { include "**" }
	from { locateJar('templar') } { include "**" }
	from { locateJar('markdown_to_asciidoc') } { include "**" }

	from(sourceSets.main.output) { include "**" }
}

build.finalizedBy(project.tasks.fatJar)
